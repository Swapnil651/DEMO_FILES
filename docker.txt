

docker -d run centos --name=dthapp

docker cp dth-web-app.war dthapp:/tmp

[224566/] yum install java

java -jar dth-web-app.war

docker commit 224566 localhost/dthapp:0.3

projectblockbuster

docker login

docker tag localhost/dthapp:0.3 projectblockbuster/dthapp:0.3

docker push projectblockbuster/dthapp:0.3



docker volume create myvolume

docker -d run centos -v myvolume:/tmp --name=dthapp
docker -d run centos -v home/centos:/tmp --name=dthapp



Default Network - Bridge Network

docker -d run centos --name=container1  172.2.3.0

docker -d run centos --name=container2 172.2.3.2

[2246767/] ping 172.2.3.0





docker network create oldie


Default Network - Bridge Network - bridge0
docker -d run centos --name=container1  172.2.3.0

oldie
docker -d run centos --network=oldie --name=container2 172.2.3.2

[container2/] ping 172.2.3.0



Front End Html CSS etc - Container1 - SomeNet1

Java Server - Container2 - SomeNet1, SomeNet2
      -
DB Layer - Container3 - SomeNet2


FrontEND -> JAVAServer -> DB


docker -d run centos -p 5050:8080 --network=oldie --name=container2

docker -d run centos --name=dthapp

docker cp dth-web-app.war dthapp:/tmp

[224566/] yum install java

java -jar dth-web-app.war

docker commit 224566 localhost/dthapp:0.3

Dockerfile
FROM centos
COPY dth-web-app.war /tmp
RUN yum install -y java
CMD ["java","-jar","dth-web-app.war"]

docker build -t localhost/dthapp:0.3 .






Docker Host Node
docker swarm init

docker swarm join \
    --token SWMTKN-1-51zjq7mbd0x8wzqiwo7gwalejho3obrhlt81kcu8madczswiea-7uxevh3jd1woubmn94xh22g8k \
    172.31.9.72:2377
	
Docker Node
Docker is installed
Docker is started [ sudo service docker status]
sudo docker swarm join \
    --token SWMTKN-1-51zjq7mbd0x8wzqiwo7gwalejho3obrhlt81kcu8madczswiea-7uxevh3jd1woubmn94xh22g8k \
    172.31.9.72:2377
This node joined a swarm as a worker.

































sudo yum install docker
sudo service docker start

Start docker without sudo
https://docs.docker.com/install/linux/linux-postinstall/



docker commit a0514e831b40 dth_app

docker save -o /tmp/dth_app.tar dth_app
docker load -i /tmp/dth_app.tar

https://docs.docker.com/install/linux/linux-postinstall/
sudo groupadd docker
sudo usermod -aG docker $USER
sudo usermod -aG docker jenkins
reboot
docker run centos

Configure Docker to start on boot
sudo systemctl enable docker

yum install net-tools // for ifconfig


docker network create -o "com.docker.network.bridge.host_binding_ipv4"="0.0.0.0" simple-network



sudo docker build -t localhost/dthwebapp:v1 .
sudo docker images

sudo docker swarm init


docker swarm join \
    --token SWMTKN-1-5qtrr3fmu4z4enfyqn0zcdl1d4i692zjii6tky1mr4q9p97wgj-737w2dutiioi7xkwf1cu61dn8 \
    172.31.9.72:2377
	
sudo docker network create -d overlay dthoverlay
	
docker service create --network dthoverlay --name addressapplication --replicas 2 --publish 6060:8080 localhost/addresswebapp:v1	
docker service create --network dthoverlay --name dthapplication --replicas 2 --publish 7070:8080 localhost/dthwebapp:v1	
	
docker service create --network mydthswarmnet --name addressapplication --replicas 3 
--publish 6060:8080 docker.io/projectblockbuster/addresswebapplication:v2	

version: "3"
services:
  addressapplication:
    image: docker.io/projectblockbuster/addresswebapplication
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - "6060:8080"
    networks:
      - mydthswarmnet
  dthapplication:
    image: docker.io/projectblockbuster/dthwebapp
	deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - "7070:8080"
    networks:
      - mydthswarmnet
networks:
  mydthswarmnet:














	
	
	
	
	docker volume create my-vol
docker volume ls
docker volume inspect my-vol

docker run -d --name devtest --mount source=myvol2,target=/app nginx:latest
  
docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest
  
docker service create -d \
  --replicas=4 \
  --name devtest-service \
  --mount source=myvol2,target=/app \
  nginx:latest
  

	
sudo docker network create -d overlay dthoverlay
	
docker service create --network dthoverlay --name addressapplication --replicas 2 --publish 6060:8080 localhost/addresswebapp:v1	
docker service create --network dthoverlay --name dthapplication --replicas 2 --publish 7070:8080 localhost/dthwebapp:v1	


sudo docker stack deploy -c docker-compose.yml dthlab



Docker needs to run as root

ls -l /run | grep docker

srw-rw----  1 root   docker    0 Aug 17 10:49 docker.sock

s in "srw-rw----" stands for socket

to enable a user to run docker without sudo add the user to docker group
Check in group exists: cat /etc/group

sudo groupadd docker

[root@ip-172-31-16-132 centos]# sudo gpasswd -a centos docker
Adding user centos to group docker

[root@ip-172-31-16-132 centos]# cat /etc/group | grep dock
docker:x:994:centos















sudo docker create centos
Unable to find image 'centos:latest' locally
Trying to pull repository docker.io/library/centos ...
latest: Pulling from docker.io/library/centos
8ba884070f61: Pull complete
Digest: sha256:8d487d68857f5bc9595793279b33d082b03713341ddec91054382641d14db861
Status: Downloaded newer image for docker.io/centos:latest
618ab65b43f704439a37f490cfda9810c32d1455a1c7925dd3b851e75f864d3d

sudo docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

sudo docker container ls -all
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
618ab65b43f7        centos              "/bin/bash"         4 minutes ago       Created                                 musing_ritchie

sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
docker.io/centos    latest              9f38484d220f        6 weeks ago         202 MB


sudo docker run -it centos /bin/bash
docker exec -it 4e623af0534a /bin/bash
docker attach 4e623af0534a

sudo docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES
4e623af0534a        centos              "/bin/bash"         About a minute ago   Up About a minute                       happy_darwin


[centos@ip-172-31-31-213 ~]$ sudo docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
777aacc65d2a        bridge              bridge              local
e85615ff2879        host                host                local
0efd375301be        my_bridge           bridge              local
658dad0647ec        none                null                local

sudo docker network inspect 777aacc65d2a

sudo docker inspect 4e623af0534a

sudo docker build -t localhost/dthwebapp:v1 .
sudo docker tag localhost/dthwebapp:v1 projectblockbuster/dthwebapp:v1
sudo docker push projectblockbuster/dthwebapp:v1

 

https://docs.docker.com/registry/deploying/

docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname
docker push projectblockbuster/project-blockbuster:tagname

docker run -d -p 7070:8080 --link=56e731a05486 -h dthapplication --name=dthapplication projectblockbuster/dthwebapp:v1
docker run -d -p 6060:8080 -h addressapplication --name=addressapplication projectblockbuster/addresswebapp:v1

docker run -d -p 6060:8080 -h addressapplication --name=addressapplication --network=my_bridge projectblockbuster/addresswebapp:v1

sudo docker network create my_bridge
sudo docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
777aacc65d2a        bridge              bridge              local
e85615ff2879        host                host                local
0efd375301be        my_bridge           bridge              local
658dad0647ec        none                null                local


docker swarm init --advertise-addr 172.31.26.136

https://github.com/NaturalHistoryMuseum/scratchpads2/wiki/Install-Docker-and-Docker-Compose-(Centos-7)

https://docs.docker.com/engine/docker-overview/

docker service create --name nginx --publish published=8080,target=8080 --mount type=bind,src=/etc/hostname,dst=/etc/docker-hostname,ro --replicas 3 projectblockbuster/addresswebapp:v1
docker service create --name nginx --hostname addressapplication --publish published=8080,target=8080 --replicas 3 projectblockbuster/addresswebapp:v1
docker service create --name dthapp --link nginx:nginx --hostname dthapplication --publish published=7070,target=8080 --replicas 3 projectblockbuster/projectblockbuster/dthwebapp:v1


Install Docker Engine
Docker Engine is a client-server application with these major components
A server which is a type of long-running program called a daemon process
A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.
A command line interface (CLI) client 
sudo yum install docker

Start Docker
service docker start

docker images

docker run -it centos bash

docker container ls --all
docker ps

docker ps –a

docker kill $(docker ps -q)
docker rm $(docker ps -a -q)

docker attach 58b07b100159

Ctrl + P + Q

Create a httpd docker container

Create a custom Dockerfile

$ ls
Dockerfile		app.py			requirements.txt

docker build --tag=friendlyhello .
docker build --tag=friendlyhello:v0.0.1 .

docker run -p 4000:80 friendlyhello

docker image ls

Run in background
docker run -d -p 4000:80 friendlyhello

docker container ls

Log in with your Docker ID
docker login

Tag the image

docker tag image username/repository:tag
docker tag friendlyhello gordon/get-started:part2

docker image ls

REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
friendlyhello            latest              d9e555c53008        3 minutes ago       195MB
gordon/get-started         part2               d9e555c53008        3 minutes ago       195MB
python                   2.7-slim            1c7128a655f6        5 days ago          183MB

Publish the image
docker push username/repository:tag

Pull and run the image from the remote repository
docker run -p 4000:80 username/repository:tag

different pieces of the app are called “services”. 
For example, if you imagine a video sharing site, it probably includes 

a service for storing application data in a database, 
a service for video transcoding in the background after a user uploads something, 
a service for the front-end, and so on.

Services are really just “containers in production.” 
A service only runs one image, 
but it codifies the way that image runs—what ports it should use, 
how many replicas of the container should run so the service has the capacity it needs, and so on

Your first docker-compose.yml file

version: "3"
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "4000:80"
    networks:
      - webnet
networks:
  webnet:

Run your new load-balanced app

docker stack deploy -c docker-compose.yml getstartedlab

docker service ls

docker stack services getstartedlab
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
bqpve1djnk0x        getstartedlab_web   replicated          5/5                 username/repo:tag   *:4000->80/tcp

A swarm is a group of machines that are running Docker and joined into a cluster.
docker swarm init

docker swarm join \
  --token <token> \
  <myvm ip>:<2377>

docker stack ps getstartedlab

A stack is a group of interrelated services that share dependencies, and can be orchestrated and scaled together.


ce username/repo:tag with your image details.

version: "3"
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
    ports:
      - "80:80"
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet

networks:
  webnet:
  
  
  
  
  
  
  
  
  
  
  
  


version: "3"
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
    ports:
      - "80:80"
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - "/home/docker/data:/data"
    deploy:
      placement:
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    networks:
      - webnet
networks:
  webnet:


docker stack deploy -c docker-compose.yml getstartedlab

Creating network getstartedlab_webnet
Creating service getstartedlab_web
Creating service getstartedlab_visualizer
Creating service getstartedlab_redis


docker volume create my-vol
docker volume ls
docker volume inspect my-vol
[
    {
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/my-vol/_data",
        "Name": "my-vol",
        "Options": {},
        "Scope": "local"
    }
]
docker volume rm my-vol

docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest
  
docker inspect devtest
"Mounts": [
    {
        "Type": "volume",
        "Name": "myvol2",
        "Source": "/var/lib/docker/volumes/myvol2/_data",
        "Destination": "/app",
        "Driver": "local",
        "Mode": "",
        "RW": true,
        "Propagation": ""
    }
],




[getstartedlab] ~ $ docker node ls
ID                            HOSTNAME                                      STATUS              AVAILABILITY        MANAGER STATUS
n2bsny0r2b8fey6013kwnom3m *   ip-172-31-20-217.us-west-1.compute.internal   Ready

[getstartedlab] ~/sandbox/getstart $ docker service ls
ID                  NAME                       MODE                REPLICAS            IMAGE                             PORTS
ioipby1vcxzm        getstartedlab_redis        replicated          0/1                 redis:latest                      *:6379->6379/tcp
u5cxv7ppv5o0        getstartedlab_visualizer   replicated          0/1                 dockersamples/visualizer:stable   *:8080->8080/tcp
vy7n2piyqrtr        getstartedlab_web          replicated          5/5                 sam/getstarted:part6    *:80->80/tcp


Use docker service ps <service> to view tasks for a service.

[getstartedlab] ~/sandbox/getstart $ docker service ps vy7n2piyqrtr
ID                  NAME                  IMAGE                            NODE                                          DESIRED STATE       CURRENT STATE            ERROR               PORTS
qrcd4a9lvjel        getstartedlab_web.1   sam/getstarted:part6   ip-172-31-20-217.us-west-1.compute.internal   Running             Running 20 seconds ago                       
sknya8t4m51u        getstartedlab_web.2   sam/getstarted:part6   ip-172-31-20-217.us-west-1.compute.internal   Running             Running 17 seconds ago                       
ia730lfnrslg        getstartedlab_web.3   sam/getstarted:part6   ip-172-31-20-217.us-west-1.compute.internal   Running             Running 21 seconds ago                       
1edaa97h9u4k        getstartedlab_web.4   sam/getstarted:part6   ip-172-31-20-217.us-west-1.compute.internal   Running             Running 21 seconds ago                       
uh64ez6ahuew        getstartedlab_web.5   sam/getstarted:part6   ip-172-31-20-217.us-west-1.compute.internal   Running             Running 22 seconds ago        

  

A single container running in a service is called a task. 
Tasks are given unique IDs that numerically increment, up to the number of replicas you defined in docker-compose.yml  

docker service ps getstartedlab_web

docker container ls -q

docker stack ps getstartedlab
ID                  NAME                  IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
uwiaw67sc0eh        getstartedlab_web.1   username/repo:tag   docker-desktop      Running             Running 9 minutes ago                       
sk50xbhmcae7        getstartedlab_web.2   username/repo:tag   docker-desktop      Running             Running 9 minutes ago                       
c4uuw5i6h02j        getstartedlab_web.3   username/repo:tag   docker-desktop      Running             Running 9 minutes ago                       
0dyb70ixu25s        getstartedlab_web.4   username/repo:tag   docker-desktop      Running             Running 9 minutes ago                       
aocrb88ap8b0        getstartedlab_web.5   username/repo:tag   docker-desktop      Running

Scale the app
You can scale the app by changing the replicas value in docker-compose.yml, saving the change, and re-running the docker stack deploy command:

docker stack deploy -c docker-compose.yml getstartedlab

docker container ls -q 

Take down the app and the swarm
Take the app down with docker stack rm:
docker stack rm getstartedlab

Take down the swarm.
docker swarm leave --force


  
Manage a user-defined bridge
docker network create my-net




## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
	docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyhello" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry



docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager


docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1 # Win10
docker-machine env myvm1                # View basic information about your node
docker-machine ssh myvm1 "docker node ls"         # List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"        # Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"   # View join token
docker-machine ssh myvm1   # Open an SSH session with the VM; type "exit" to end
docker node ls                # View nodes in swarm (while logged on to manager)
docker-machine ssh myvm2 "docker swarm leave"  # Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f" # Make master leave, kill swarm
docker-machine ls # list VMs, asterisk shows which VM this shell is talking to
docker-machine start myvm1            # Start a VM that is currently not running
docker-machine env myvm1      # show environment variables and command for myvm1
eval $(docker-machine env myvm1)         # Mac command to connect shell to myvm1
& "C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe" env myvm1 | Invoke-Expression   # Windows command to connect shell to myvm1
docker stack deploy -c <file> <app>  # Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"   # Deploy an app using ssh (you must have first copied the Compose file to myvm1)
eval $(docker-machine env -u)     # Disconnect shell from VMs, use native docker
docker-machine stop $(docker-machine ls -q)               # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images







Setup Docker In jenkins
login to jenkins node
sudo yum install docker
sudo service docker start
sudo service docker status

sudo groupadd docker
sudo usermod -aG docker $USER
sudo usermod -aG docker centos
sudo usermod -aG docker jenkins

In Jenkins Manage plugins - In avaliable select docker plugin and install
Configure Credentials
Add docker hub login details


1) Checkout DTH Application - GIT
2) I will build - compile using maven
3) I will test using maven
4) I will create a docker image using docker in jenkins
5) I will push the image to dockerhub






pipeline {
  environment {
    registry = "projectblockbuster/dthwebapplication"
    registryCredential = 'dockerhublogin'
    dockerImage = ''
  }
  agent any
  stages {
    stage('Cloning Git') {
      steps {
        git 'https://github.com/project-blockbuster/DTHWebApplication.git'
      }
    }
    stage('Build') {
       steps {
         sh 'mvn compile'
       }
    }
    stage('Test') {
      steps {
        sh 'mvn test -DskipITs'
      }
    }
    stage('Package') {
      steps {
        sh 'mvn package -Dskip.surefire.tests -DskipITs'
      }
    }
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Deploy Image') {
      steps{
         script {
            docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
  }
}





